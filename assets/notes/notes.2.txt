//functions
//   function question() {
//     for(var i=0;i<questions.length;i++) {
//       if(questions[i].id === index) {
//         console.log(questions[i].question)
//       } else {
//         console.log('foo');
//       }
//     }
// }
//     // console.log(questions[i]);
//
//
//   $('.start-btn').on('click', function() {
//     question();
//   });


// var obj =
// {
//     'foo': 1,
//     'bar': 2
// };
//
// for (var key in obj) {
//     console.log(obj[key]);
// }
// Or with jQuery:
//
// $.each(obj, function(key, value) {
//     console.log(this, value, obj[key]);
// });

// });

//this is a text
//the main function of the application.  When start is pressed, the functions of above will be selected. gameTimer(), getQuestions, getAnswer, evalutateAnswer().  Should the order be start game on click then all functions held inside the gameTimer?
// function getQuestion() {
//   //this is a test
//   $('#question').text(myQuestions[0].question);
//
//   var index = 0;
//   for(var i=0;i<myPotentialAnswers.length;i++) {
//     if(myPotentialAnswers[i].id === index) {
//
//     }
//   }
//   var index = 0;
//   myPotentialAnsers[index];
//
// // Get a question from the myQuestions object
//   }
// function getAnswer() {
//   //this is a test
//   var answer = $.toString(myQuestions[0].potentalAnswers;
//     console.log(answer);
//   $('.answer').text(answer);
//   // pull the answers from the potentialAnswers array and display them in the <p> tags with the class of answer in the display.  currently, the <p> tags are hardcoded in the dom.  It has been suggested, it would be easier to display randoomly selected potentialAnswers and add them to dynamically generated <p> tages ex: ...html('<p class="answer">potentialAnswers[i]</p>).  ???
// }
// function evalutateAnswer() {
//   // check the selected answer to the acual answer presented in the myQuestions object.  If it is correct win++ if not loss ++. evelautate the number of wins and losses if they are >= 5 the game is over
// }
// function gameTimer() {
//   // set a timeOut function for two events.  One create timer that displays and countdowns from 25 in the timer class.  Evalutate if an answer has been selected within 25 seconds.  If an answer is not selected within 25 seconds loss++
// }
//
// $('.start-btn').on('click', function() {
//   //this is a text
//   console.log('I\'ve been clicked');
//   getQuestion();
//   getAnswer();
//   //the main function of the application.  When start is pressed, the functions of above will be selected. gameTimer(), getQuestions, getAnswer, evalutateAnswer().  Should the order be start game on click then all functions held inside the gameTimer?
// });
